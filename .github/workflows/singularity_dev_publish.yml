name: Apptainer Build and Publish Dev
on:
  push:
    branches: [ main ]

jobs:
  changes:
    name: "Changed Definition Files"
    runs-on: ubuntu-latest
    outputs:
      changed_file: ${{ steps.files.outputs.added_modified }}
    steps:
      - id: files
        uses: jitterbit/get-changed-files@b17fbb00bdc0c0f63fcf166580804b4d2cdc2a42
        with:
          format: 'json'

  build-test-containers:
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        changed_file: ${{ fromJson(needs.changes.outputs.changed_file) }}

    name: Check ${{ matrix.changed_file }}
    steps:
      - name: Continue if Apptainer Recipe
        run: |
          if [[ "${{ matrix.changed_file }}" = *.def ]]; then
            echo "keepgoing=true" >> $GITHUB_ENV
          fi

      - name: Checkout repository
        if: ${{ env.keepgoing == 'true' }}
        uses: actions/checkout@v4

      - name: Update submodules recursively
        if: ${{ env.keepgoing == 'true' }}
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Set Container Tag
        if: ${{ env.keepgoing == 'true' }}
        run: |
          TAG="${GITHUB_SHA::7}-x86"
          echo "Container Tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_ENV

      - name: Set up Go
        if: ${{ env.keepgoing == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Go
        if: ${{ env.keepgoing == 'true' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Install Build Dependencies
        if: ${{ env.keepgoing == 'true' }}
        run: |
          sudo apt-get update && sudo apt-get install -y \
            build-essential \
            libssl-dev \
            uuid-dev \
            libgpgme11-dev \
            libseccomp-dev \
            pkg-config \
            autoconf \
            automake \
            libtool \
            squashfs-tools \
            squashfs-tools-ng \
            zlib1g-dev \
            libsubid-dev \
            cryptsetup \
            git \
            wget \
            fuse \
            libfuse-dev \
            uidmap \
            runc \
            fuse2fs

      - name: Install Apptainer
        if: ${{ env.keepgoing == 'true' }}
        env:
          APPTAINER_VERSION: 1.3.5
          GOPATH: /tmp/go
        run: |
          set -euo pipefail
          mkdir -p "$GOPATH"
          sudo mkdir -p /usr/local/var/apptainer/mnt
          # Build apptainer from source
          wget -qO- https://github.com/apptainer/apptainer/releases/download/v${APPTAINER_VERSION}/apptainer-${APPTAINER_VERSION}.tar.gz | tar xz
          cd apptainer-${APPTAINER_VERSION}
          ./mconfig -p /usr/local
          make -C builddir
          sudo make -C builddir install
          apptainer --version

      - name: Build Container
        if: ${{ env.keepgoing == 'true' }}
        env:
          recipe: ${{ matrix.changed_file }}
        run: |
          sudo -E apptainer build container.sif "${{ matrix.changed_file }}"

      - name: Login and Push to GHCR (ORAS)
        if: ${{ env.keepgoing == 'true' }}
        env:
          GH_USER: ${{ secrets.GHCR_USERNAME }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          IMAGE_PATH="$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')-apptainer"
          REF="oras://ghcr.io/${IMAGE_PATH}:${{ env.tag }}-x86"

          # Newer apptainer has `registry login`; older uses `remote login`.
          echo "${GH_TOKEN}" | apptainer registry login -u "${GH_USER}" --password-stdin oras://ghcr.io \
            || echo "${GH_TOKEN}" | apptainer remote login -u "${GH_USER}" --password-stdin oras://ghcr.io

          apptainer push container.sif "$REF"
          echo "Pushed: $REF"
